{"version":3,"sources":["CrossBrowser.js","App.js","index.js"],"names":["agent","getAgent","CrossBrowser","console","log","os","name","IS_ANDROID","IS_IOS","window","location","href","open","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","MESSAGING_ID","appId","measurementId","MEASUREMENT_ID","auth","firestore","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idFiled","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","placeholder","type","disabled","props","messageClass","src","App","useAuthState","user","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAGMA,EAAQC,cAmBCC,MAjBf,WACEC,QAAQC,IAAIJ,EAAMK,GAAGC,MACrB,IAAMC,EAA+B,YAAlBP,EAAMK,GAAGC,KACtBE,EAA2B,QAAlBR,EAAMK,GAAGC,KACpBC,GACFJ,QAAQC,IAAI,GACZK,OAAOC,SAASC,KACd,iHACOH,IACTL,QAAQC,IAAI,GACZK,OAAOG,KACL,uDACA,W,6DCHNC,IAASC,cAAc,CACrBC,OAAQC,0CACRC,WAAYD,iCACZE,UAAWF,iBACXG,cAAeH,6BACfI,kBAAmBJ,qfAAYK,aAC/BC,MAAON,4CACPO,cAAeP,qfAAYQ,iBAG7B,IAAMC,EAAOZ,IAASY,OAChBC,EAAYb,IAASa,YAmB3B,SAASC,IACPzB,IAMA,OACE,yBAAQ0B,UAAU,UAAUC,QANL,WACvB,IAAMC,EAAW,IAAIjB,IAASY,KAAKM,mBACnCN,EAAKO,gBAAgBF,IAIrB,UACE,cAAC,IAAD,IACA,qCAEA,+BACE,uFAMR,SAASG,IACP,OACER,EAAKS,aACH,wBAAQN,UAAU,WAAWC,QAAS,kBAAMJ,EAAKU,WAAjD,sCAON,SAASC,IACP,IAAMC,EAAQC,mBACRC,EAAcb,EAAUc,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,KAHnC,EAKCC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EALW,sBAOgBC,mBAAS,IAPzB,mBAOXC,EAPW,KAOAC,EAPA,KASZC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAEQ5B,EAAKS,YAAvBoB,EAFU,EAEVA,IAAKC,EAFK,EAELA,SAFK,SAIZhB,EAAYiB,IAAI,CACpBC,KAAMT,EACNU,UAAW7C,IAASa,UAAUiC,WAAWC,kBACzCN,MACAC,aARgB,OAWlBN,EAAa,IAEbZ,EAAMwB,QAAQC,eAAe,CAAEC,SAAU,WAbvB,2CAAH,sDAejB,OACE,qCACE,iCACGjB,GACCA,EAASkB,KAAI,SAACC,GAAD,OAAS,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OAC9C,sBAAMC,IAAKhC,OAEb,uBAAMiC,SAAUpB,EAAhB,UACE,uBACEqB,MAAOvB,EACPwB,SAAU,SAACrB,GAAD,OAAOF,EAAaE,EAAEsB,OAAOF,QACvCG,YAAY,KAEd,wBAAQC,KAAK,SAASC,UAAW5B,EAAjC,SACE,cAAC,IAAD,YAOV,SAASkB,EAAYW,GAAQ,IAAD,EACMA,EAAMV,QAA9BV,EADkB,EAClBA,KAAMH,EADY,EACZA,IAAKC,EADO,EACPA,SAEbuB,EAAexB,IAAQ7B,EAAKS,YAAYoB,IAAM,OAAS,WAE7D,OACE,mCACE,sBAAK1B,UAAS,kBAAakD,GAA3B,UACE,qBAAKC,IAAKxB,IACV,4BAAIE,SAMGuB,MAzGf,WAAe,MAGEC,YAAaxD,GAArByD,EAHM,oBAIb,OACE,sBAAKtD,UAAU,MAAf,UACE,mCACE,2FACA,cAACK,EAAD,OAGF,kCAAUiD,EAAO,cAAC9C,EAAD,IAAe,cAACT,EAAD,U,MClCtCwD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1a080391.chunk.js","sourcesContent":["//os 감지\r\nimport getAgent from '@egjs/agent';\r\n\r\nconst agent = getAgent();\r\n\r\nfunction CrossBrowser() {\r\n  console.log(agent.os.name);\r\n  const IS_ANDROID = agent.os.name === 'android';\r\n  const IS_IOS = agent.os.name === 'ios';\r\n  if (IS_ANDROID) {\r\n    console.log(1);\r\n    window.location.href =\r\n      'intent:https://park-siwan.github.io/react-firebase-chatting#Intent;scheme=http;package=com.android.chrome;end';\r\n  } else if (IS_IOS) {\r\n    console.log(2);\r\n    window.open(\r\n      'https://park-siwan.github.io/react-firebase-chatting',\r\n      '_self'\r\n    );\r\n  }\r\n}\r\n\r\nexport default CrossBrowser;\r\n","import React, { useRef, useState } from 'react';\nimport './App.css';\nimport CrossBrowser from './CrossBrowser';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n// import 'firebase/analytics';\n\nimport * as FaIcons from 'react-icons/fa';\nimport * as FcIcons from 'react-icons/fc';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.MESSAGING_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.MEASUREMENT_ID,\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n// const analytics = firebase.analytics();\n\nfunction App() {\n  // Android, ios 확인\n\n  const [user] = useAuthState(auth);\n  return (\n    <div className='App'>\n      <header>\n        <h4> ⭐ 소원을 빌어주세요</h4>\n        <SignOut />\n      </header>\n\n      <section>{user ? <ChatRoom /> : <SignIn />}</section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n  CrossBrowser();\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  };\n\n  return (\n    <button className='sign-in' onClick={signInWithGoogle}>\n      <FcIcons.FcGoogle />\n      <span> </span>\n\n      <span>\n        <b>구글로 로그인하기</b>\n      </span>\n    </button>\n  );\n}\n\nfunction SignOut() {\n  return (\n    auth.currentUser && (\n      <button className='sign-out' onClick={() => auth.signOut()}>\n        로그아웃\n      </button>\n    )\n  );\n}\n\nfunction ChatRoom() {\n  const dummy = useRef();\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(500);\n\n  const [messages] = useCollectionData(query, { idFiled: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL,\n    });\n\n    setFormValue('');\n\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  };\n  return (\n    <>\n      <main>\n        {messages &&\n          messages.map((msg) => <ChatMessage key={msg.id} message={msg} />)}\n        <span ref={dummy}></span>\n      </main>\n      <form onSubmit={sendMessage}>\n        <input\n          value={formValue}\n          onChange={(e) => setFormValue(e.target.value)}\n          placeholder=''\n        />\n        <button type='submit' disabled={!formValue}>\n          <FaIcons.FaPaperPlane />\n        </button>\n      </form>\n    </>\n  );\n}\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (\n    <>\n      <div className={`message ${messageClass}`}>\n        <img src={photoURL} />\n        <p>{text}</p>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}